server <- function(){
while(TRUE){
writeLines("Listening...")
con <- socketConnection(host="localhost", port = 1771, blocking=TRUE,
server=TRUE, open="r+")                  close(con)
}
}
server <- function(){
while(TRUE){
writeLines("Listening...")
con <- socketConnection(host="localhost", port = 1771, blocking=TRUE,
server=TRUE, open="r+") close(con)
}
}
server <- function(){
while(TRUE){
writeLines("Listening...")
con <- socketConnection(host="localhost", port = 1771, blocking=TRUE,
server=TRUE, open="r+")
close(con)
}
}
server <- function() {
while(TRUE) {}
}
server <- function() {
while(TRUE) {
wrtiteLines("Listening")
con <- socketConnection(host="localhost", port = 1771, blocking=TRUE, server=TRUE, open="r+")
close(con)
}
}
server
server <- function() {
while(TRUE) {
wrtiteLines("Listening")
con <- socketConnection(host="localhost", port = 1771, blocking=TRUE, server=TRUE, open="r+")
writelines("Test input", con)
close(con)
}
}
server()
server <- function() {
while(TRUE) {
writeLines("Listening")
con <- socketConnection(host="localhost", port = 1771, blocking=TRUE, server=TRUE, open="r+")
writelines("Test input", con)
close(con)
}
}
server()
server <- function() {
while(TRUE) {
writeLines("Listening")
con <- socketConnection(host="localhost", port = 1771, blocking=TRUE, server=TRUE, open="r+")
writeLines("Test input", con)
close(con)
}
}
server()
server
server -> function() {
while(TRUE) {
writeLines("Listening")
con <- socketConnection(host="localhost", port = 1771, blocking=TRUE, server=TRUE, open="r+")
writeLines("Test input", con)
close(con)
}
}
server <- function() {
while(TRUE) {
writeLines("Listening")
con <- socketConnection(host="localhost", port = 1771, blocking=TRUE, server=TRUE, open="r+")
writeLines("Test input", con)
close(con)
}
}
close(con)
server()
server
server
server()
View(server)
View(server)
source('~/SCBW_AI/R_Code/Genetic_Algorithm_BO.R')
server
server()
writeLines?
?writeLines
test <- c(4, 0, 0, 0, 0)
?c
?string
??string
toString
??toString
toString(test)
toString(test)
source('~/SCBW_AI/R_Code/Genetic_Algorithm_BO.R')
server
server()
server()
source('~/SCBW_AI/R_Code/Genetic_Algorithm_BO.R')
server()
source('~/SCBW_AI/R_Code/Genetic_Algorithm_BO.R')
server()
source('~/SCBW_AI/R_Code/Genetic_Algorithm_BO.R')
server()
server()
server()
server()
source('~/SCBW_AI/R_Code/Genetic_Algorithm_BO.R')
server()
server()
server()
server()
server()
server()
server()
source('~/SCBW_AI/R_Code/Genetic_Algorithm_BO.R')
server()
server()
?readLines
source('~/SCBW_AI/R_Code/Genetic_Algorithm_BO.R')
server()
source('~/SCBW_AI/R_Code/Genetic_Algorithm_BO.R')
server()
server()
server()
server()
source('~/SCBW_AI/R_Code/Genetic_Algorithm_BO.R')
source('~/SCBW_AI/R_Code/Genetic_Algorithm_BO.R')
server()
source('~/SCBW_AI/R_Code/Genetic_Algorithm_BO.R')
server()
source('~/SCBW_AI/R_Code/Genetic_Algorithm_BO.R')
server()
server()
server()
server()
source('~/SCBW_AI/R_Code/Genetic_Algorithm_BO.R')
server()
server()
source('~/SCBW_AI/R_Code/Genetic_Algorithm_BO.R')
server()
server()
source('~/SCBW_AI/R_Code/Genetic_Algorithm_BO.R')
server()
source('~/SCBW_AI/R_Code/Genetic_Algorithm_BO.R')
server()
source('~/SCBW_AI/R_Code/Genetic_Algorithm_BO.R')
server()
server()
install
??install
install.packages(GA)
install.packages("GA")
library(GA)
install.packages("foreach")
library(GA)
?gaControl
control <- gaControl("permutation")
control
?ga
?gabin_Population
ga()
f <- function(x) {}
f <- function(x) {return 1}
f <- function(x) {return(1)}
f
f()
ga(fitness = f)
ga(type = "permutation", fitness = f, min = 0, max = 4)
ga(type = "permutation", fitness = f, min = 0, max = 4, popSize = 20)
ga(type = "permutation", fitness = f, min = 0, max = 4, popSize = 5, )
ga(type = "permutation", fitness = f, min = 0, max = 4, popSize = 10)
ga(type = "permutation", fitness = f, min = 0, max = 4, popSize = 100)
ga(type = "permutation", fitness = f, min = 0, max = 4, popSize = 25)
ga(type = "permutation", fitness = f, min = 0, max = 4)
ga(type = "real-valued", fitness = f, min = 0, max = 4)
ga <- ga(type = "real-valued", fitness = f, min = 0, max = 4)
ga
ga.call
ga$call
gaSummary(g)
gaSummary(ga)
summary(ga)
ga@call
ga <- ga(type = "permutation", fitness = f, min = c(0, 0, 0), max = c(4, 4, 4))
ga <- ga(type = "permutation", fitness = f, min = c(0, 0, 0, 0, 0), max = c(4, 4, 4, 4, 4))
ga <- ga(type = "permutation", fitness = f, min = c(0, 0, 0, 0, 0), max = c(4, 4, 4, 4, 4), names = c("scv", "marine", "supply_depot", "barracks", "push_marines"))
paste0("thing", 1:3)
x <- paste0("thing", 1:3)
x
x[1]
ga <- ga(type = "permutation", fitness = f, min = c(0, 0, 0, 0, 0), max = c(4, 4, 4, 4, 4))
ga <- ga(type = "permutation", fitness = f, min = c(0, 0, 0, 0, 0), max = c(4, 4, 4, 4, 4), names=paste0("test", 0:4))
ga <- ga(type = "permutation", fitness = f, min = c(0, 0, 0, 0, 0), max = c(4, 4, 4, 4, 4), names=paste0("test", 1:5))
ga <- ga(type = "permutation", fitness = f, min = c(0, 0, 0, 0, 0), max = c(4, 4, 4, 4, 4))
ga <- ga(type = "permutation", fitness = f, min = c(1, 1, 1, 1, 1), max = c(4, 4, 4, 4, 4))
ga <- ga(type = "permutation", fitness = f, min = c(1, 1, 1, 1, 1), max = c(5, 5, 5, 5, 5))
ga
source('~/SCBW_AI/R_Code/Genetic_Algorithm_BO.R')
rep(c(0, 1), each=c(1, 5))
rep(c(0, 1), each=5
)
c(0, rep(1, 5))
source('~/SCBW_AI/R_Code/Genetic_Algorithm_BO.R')
ga <- ga(type = "permutation", fitness = f, min = MIN_VAL, max = MAX_VAL)
ga
ga@bestSol
ga@solution
ga@solution[1]
ga@solution[1,]
source('~/SCBW_AI/R_Code/Genetic_Algorithm_BO.R')
ga <- ga(type = "permutation", fitness = f, min = MIN_VAL, max = MAX_VAL)
ga@solution
thing <- function() {}
thing <- function() {
min=0
max=5
popSize=50
}
thing
thing()
thing1 <- thing
thing1
thing1 <- thing()
thing1
thing <- function(
min=0,
max=5,
popSize=50
){}
thing()
thing1 <- thing()
thing1
thing@popSize = 50
source('~/SCBW_AI/R_Code/Genetic_Algorithm_BO.R')
gaperm_Population()
ga <- new("ga")
ga@min= 1
ga@max=5
ga@min
ga@min=0
ga@popSize
ga@popSize=50
gaperm_Population(ga)
?gaperm_Population
sample(seq.int(0, 4), 10, replace = T)
ga@max=4
gaperm_Population(ga, replace=T)
source('~/SCBW_AI/R_Code/Genetic_Algorithm_BO.R')
gaperm_Population(ga, replace=T, size = 100)
source('~/SCBW_AI/R_Code/Genetic_Algorithm_BO.R')
gaperm_Population(ga, replace=T, size = 100)
source('~/SCBW_AI/R_Code/Genetic_Algorithm_BO.R')
gaperm_Population(ga, replace=T, size = 100)
source('~/SCBW_AI/R_Code/Genetic_Algorithm_BO.R')
gaperm_Population(ga, replace=T, size = 100)
source('~/SCBW_AI/R_Code/Genetic_Algorithm_BO.R')
gaperm_Population(ga, replace=T, size = 100)
gaperm_Population(ga, r=T, sz = 100)
gaperm_Population(ga, r=T, sz = 100)
sample(seq.int(0, 4), 10, replace = T)
source('~/SCBW_AI/R_Code/Genetic_Algorithm_BO.R')
gaperm_Population(ga, r=T, size = 100)
sample.int(c(0:4), 20, replace = T)
sample.int(4, 20, replace = T)
source('~/SCBW_AI/R_Code/Genetic_Algorithm_BO.R')
gaperm_Population(ga, r=T, size = 100)
sample.int(4, 100, replace = T)
source('~/SCBW_AI/R_Code/Genetic_Algorithm_BO.R')
sample.int(4, 100, replace = T)
gaperm_Population(ga, r=T, size = 100)
source('~/SCBW_AI/R_Code/Genetic_Algorithm_BO.R')
gaperm_Population(ga, r=T, variableSize = T, size = 100)
ga <- new("ga")
ga@min = 0
ga@max = 4
ga@popSize = 100
gaperm_Population(ga, r=T, variableSize = T, size = 100)
source('~/SCBW_AI/R_Code/Genetic_Algorithm_BO.R')
gaperm_Population(ga, r=T, size = 100)
source('~/SCBW_AI/R_Code/Genetic_Algorithm_BO.R')
gaperm_Population_varied(ga, r=T, size = c(1:100))
source('~/SCBW_AI/R_Code/Genetic_Algorithm_BO.R')
gaperm_Population_varied(ga, r=T, size = c(1:100))
c(1:100)
c(1:100)[2]
c(1:100)[2] + 5
matrix(list(), nrow = 100, ncol = 1)
test <- matrix(list(), nrow = 100, ncol = 1)
test[1]
test[1] <- c(1, 20)
test[[1] <- c(1, 20)
test[[1]] <- c(1, 20)
test[1]
test[[1]]
test <- gaperm_Population_varied(ga, r=T, size = c(1:100))
test[1]
test[30]
source('~/SCBW_AI/R_Code/Genetic_Algorithm_BO.R')
toBOString(c(0, 0, 0, 2, 3, 4))
source('~/SCBW_AI/R_Code/Genetic_Algorithm_BO.R')
builds
builds <<- matrix(list(), MAX_GEN, POP_SIZE)
builds
ga@popSize = POP_SIZE
ga@popSize
builds <- gaperm_Population_varied(ga, size=c(1:10), r = T)
builds[1]
builds[[1]]
builds <<- matrix(list(), MAX_GEN, POP_SIZE)
builds
builds[1]
builds[[1]]
builds[1,
]
builds[1,]
builds[[1,]]
builds[[1],]
builds[,[1]]
builds[1,]
builds[1,] <- gaperm_Population_varied(ga, size = c(5:15), r=T)
test <- gaperm_Population_varied(ga, size = c(5:15), r=T)
test
test <- gaperm_Population_varied(ga, size = c(5:14), r=T)
test
builds[1,] <- test
builds[1,]
sample(c(MIN_ORDERS:MAX_ORDERS), POP_SIZE, replace=T)
builds[1,] <- gaperm(ga, size=sample(c(MIN_ORDERS:MAX_ORDERS), POP_SIZE, replace=T), r=T)
builds[1,] <- gaperm_Population_varied(ga, size=sample(c(MIN_ORDERS:MAX_ORDERS), POP_SIZE, replace=T), r=T)
builds[1,]
source('~/SCBW_AI/R_Code/Genetic_Algorithm_BO.R')
builds[1,] <- gaperm_Population_varied(ga, size=sample(c(MIN_ORDERS:MAX_ORDERS), POP_SIZE, replace=T), r=T)
builds[1,]
new('ga')
source('~/SCBW_AI/R_Code/Genetic_Algorithm_BO.R')
main()
source('~/SCBW_AI/R_Code/Genetic_Algorithm_BO.R')
source('~/SCBW_AI/R_Code/Genetic_Algorithm_BO.R')
source('~/SCBW_AI/R_Code/Genetic_Algorithm_BO.R')
main()
ga <- new('ga')
ga
ga@min
ga@min <- 10
ga@min
source('~/SCBW_AI/R_Code/Genetic_Algorithm_BO.R')
main()
ga
ga@min
ga@max
ga@popSize
builds[1,]
main()
builds[1,]
source('~/SCBW_AI/R_Code/Genetic_Algorithm_BO.R')
main()
toBOString(builds[1,1])
toBOString(builds[1,1][])
toBOString(builds[[1,1]])
source('~/SCBW_AI/R_Code/Genetic_Algorithm_BO.R')
source('~/SCBW_AI/R_Code/Genetic_Algorithm_BO.R')
main()
source('~/SCBW_AI/R_Code/Genetic_Algorithm_BO.R')
main()
View(run_data)
View(run_data)
View(run_data)
View(builds)
builds[61,]
builds[61]
?write.csv
write.csv(run_data, file = "Examples/Random_data.csv")
??directory
setwd
setwd("C:\Users\mitch\Documents\SCBW_AI\R_Code\Examples")
setwd('C:\Users\mitch\Documents\SCBW_AI\R_Code\Examples')
getwd()
?getwd
setwd("C:\Users\mitch\Documents\SCBW_AI\R_Code\Examples")
setwd(".\R_Code\Examples")
setwd("C:/Users/mitch/Documents/SCBW_AI/R_Code/Examples")
write.csv(run_data, file = "Random_data.csv")
